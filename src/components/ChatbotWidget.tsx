import { useState, useRef, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useSelector } from "react-redux";
import { RootState } from "../store";
import { io, Socket } from "socket.io-client";
import axios from "axios";
import { FaFacebookMessenger } from "react-icons/fa";
import { SiZalo } from "react-icons/si";

const SOCKET_URL = import.meta.env.VITE_SOCKET_URL || "http://localhost:5000";

export default function ChatbotWidget() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState<any[]>([]);
  const [input, setInput] = useState("");
  const chatEndRef = useRef<HTMLDivElement>(null);
  const { t } = useTranslation();
  const user = useSelector((state: RootState) => state.user.user);
  const [socket, setSocket] = useState<Socket | null>(null);
  const [loading, setLoading] = useState(false);
  const [adminId, setAdminId] = useState<string | null>(null);
  
  // Th√¥ng tin cho user ·∫©n danh
  const [anonymousInfo, setAnonymousInfo] = useState<{name: string, email: string} | null>(null);
  const [showInfoForm, setShowInfoForm] = useState(false);

  // L·∫•y adminId khi m·ªü chat
  useEffect(() => {
    if (open) {
      axios.get('/api/users/admin').then(res => {
        setAdminId(res.data?.admin?._id || null);
      }).catch(() => setAdminId(null));
    }
  }, [open]);

  // K·∫øt n·ªëi socket khi m·ªü chat
  useEffect(() => {
    if (open) {
      const s = io(SOCKET_URL, { 
        transports: ["websocket"],
        timeout: 10000
      });
      setSocket(s);
      
      const userId = user?._id || `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      s.on("connect", () => {
        console.log("‚úÖ Socket connected!", s.id);
        s.emit("join", userId);
        
        // L∆∞u th√¥ng tin user ·∫©n danh v√†o socket n·∫øu c√≥
        if (anonymousInfo) {
          s.emit("set_anonymous_info", {
            name: anonymousInfo.name,
            email: anonymousInfo.email
          });
        }
      });
      
      s.on("connect_error", (error) => {
        console.error("‚ùå Socket connection error:", error);
      });
      
      s.on("receive_message", (msg: any) => {
        console.log("üì® Received message:", msg);
        setMessages(prev => {
          // Tr√°nh l·∫∑p tin nh·∫Øn n·∫øu ƒë√£ c√≥ (so s√°nh createdAt + content)
          if (prev.some(m => m.createdAt === msg.createdAt && m.content === msg.content && m.from === msg.from)) {
            return prev;
          }
          return [...prev, msg];
        });
      });
      
      s.on("message_error", (error) => {
        console.error("‚ùå Message error:", error);
        alert("L·ªói g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i!");
      });
      
      return () => {
        s.disconnect();
      };
    }
  }, [open, user?._id, anonymousInfo]);

  // L·∫•y l·ªãch s·ª≠ chat khi m·ªü
  useEffect(() => {
    if (open) {
      setLoading(true);
      
      // N·∫øu c√≥ user ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y l·ªãch s·ª≠ chat
      if (user?._id) {
        axios.get(`/api/users/chat/${user._id}`).then(res => {
          let msgs = Array.isArray(res.data) ? res.data : [];
          // N·∫øu ch∆∞a c√≥ tin nh·∫Øn ch√†o, th√™m v√†o ƒë·∫ßu m·∫£ng
          if (!msgs.length || (msgs[0]?.from !== 'bot' && msgs[0]?.from !== 'system')) {
            msgs = [{ 
              from: 'bot', 
              content: 'üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa HaGiang Travel. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ tour du l·ªãch H√† Giang kh√¥ng?', 
              createdAt: new Date().toISOString() 
            }, ...msgs];
          }
          setMessages(msgs);
          setLoading(false);
        }).catch(() => {
          setMessages([{ 
            from: 'bot', 
            content: 'üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa HaGiang Travel. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ tour du l·ªãch H√† Giang kh√¥ng?', 
            createdAt: new Date().toISOString() 
          }]);
          setLoading(false);
        });
      } else {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p v√† ch∆∞a c√≥ th√¥ng tin, hi·ªán form nh·∫≠p th√¥ng tin
        if (!anonymousInfo) {
          setShowInfoForm(true);
          setLoading(false);
        } else {
          // N·∫øu ƒë√£ c√≥ th√¥ng tin, hi·ªán tin nh·∫Øn ch√†o
          setMessages([{ 
            from: 'bot', 
            content: `üëã Xin ch√†o ${anonymousInfo.name}! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa HaGiang Travel. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ tour du l·ªãch H√† Giang kh√¥ng?`, 
            createdAt: new Date().toISOString() 
          }]);
          setLoading(false);
        }
      }
    }
  }, [open, user?._id, anonymousInfo]);

  useEffect(() => {
    if (open && chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
    console.log("üìù Messages updated:", messages);
  }, [messages, open]);

  const handleSend = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("üöÄ handleSend called", { input, user: user?._id, adminId, socket: !!socket });
    
    if (!input.trim()) {
      console.log("‚ùå Input is empty");
      return;
    }
    
    // T·∫°o user ID ·∫©n danh n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    const senderId = user?._id || `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Ki·ªÉm tra n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p v√† ch∆∞a c√≥ th√¥ng tin
    if (!user?._id && !anonymousInfo) {
      setShowInfoForm(true);
      return;
    }
    
    // N·∫øu kh√¥ng c√≥ adminId, th·ª≠ l·∫•y l·∫°i
    if (!adminId) {
      console.log("üîÑ Fetching admin ID...");
      axios.get('/api/users/admin').then(res => {
        const admin = res.data?.admin?._id;
        console.log("üìã Admin ID fetched:", admin);
        if (admin) {
          // C·∫≠p nh·∫≠t adminId state
          setAdminId(admin);
          
          if (socket) {
            const newMsg = {
              from: senderId,
              to: admin,
              content: input,
              createdAt: new Date().toISOString(),
              // Th√™m th√¥ng tin user ·∫©n danh n·∫øu c√≥
              ...(anonymousInfo && {
                senderName: anonymousInfo.name,
                senderEmail: anonymousInfo.email
              })
            };
            console.log("üì§ Sending message:", newMsg);
            setMessages(prev => [...prev, newMsg]);
            socket.emit("send_message", newMsg);
            setInput("");
          } else {
            console.log("‚ùå No socket connection");
            alert('ƒêang k·∫øt n·ªëi l·∫°i...');
          }
        } else {
          console.error("‚ùå No admin found");
          alert('Kh√¥ng t√¨m th·∫•y admin!');
        }
      }).catch((err) => {
        console.error("‚ùå Error fetching admin:", err);
        alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server!');
      });
      return;
    }
    
    // N·∫øu kh√¥ng c√≥ socket, th·ª≠ k·∫øt n·ªëi l·∫°i
    if (!socket) {
      console.log("‚ùå No socket connection");
      alert('ƒêang k·∫øt n·ªëi l·∫°i...');
      return;
    }
    
    const newMsg = {
      from: senderId,
      to: adminId,
      content: input,
      createdAt: new Date().toISOString(),
      // Th√™m th√¥ng tin user ·∫©n danh n·∫øu c√≥
      ...(anonymousInfo && {
        senderName: anonymousInfo.name,
        senderEmail: anonymousInfo.email
      })
    };
    console.log("üì§ Sending message:", newMsg);
    // Optimistic update: th√™m tin nh·∫Øn v√†o state ngay
    setMessages(prev => [...prev, newMsg]);
    socket.emit("send_message", newMsg);
    setInput("");
  };

  // H√†m m·ªü Zalo
  const openZalo = () => {
    window.open('https://zalo.me/84983648362', '_blank');
  };

  // H√†m m·ªü Messenger
  const openMessenger = () => {
    window.open('https://m.me/homietravel42', '_blank');
  };

  // H√†m x·ª≠ l√Ω form nh·∫≠p th√¥ng tin
  const handleInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    
    if (name.trim() && email.trim()) {
      setAnonymousInfo({ name: name.trim(), email: email.trim() });
      setShowInfoForm(false);
      // Hi·ªán tin nh·∫Øn ch√†o v·ªõi t√™n
      setMessages([{ 
        from: 'bot', 
        content: `üëã Xin ch√†o ${name.trim()}! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa HaGiang Travel. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ tour du l·ªãch H√† Giang kh√¥ng?`, 
        createdAt: new Date().toISOString() 
      }]);
    }
  };

  // Giao di·ªán chat cho t·∫•t c·∫£ users (ƒë√£ ƒëƒÉng nh·∫≠p ho·∫∑c ch∆∞a)
  return (
    <>
      {/* N√∫t m·ªü chatbot */}
      {!open && (
        <div className="fixed bottom-6 right-6 z-50 flex flex-col items-end gap-4">
          {/* N√∫t Zalo */}
          <button
            onClick={openZalo}
            className="bg-blue-500 hover:bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg focus:outline-none transition-all duration-300 hover:scale-110"
            aria-label="Chat Zalo"
            title="Chat Zalo"
          >
            <SiZalo size={24} />
          </button>
          
          {/* N√∫t Messenger */}
          <button
            onClick={openMessenger}
            className="bg-blue-600 hover:bg-blue-700 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg focus:outline-none transition-all duration-300 hover:scale-110"
            aria-label="Chat Messenger"
            title="Chat Messenger"
          >
            <FaFacebookMessenger size={24} />
          </button>
          
          {/* N√∫t Chatbot */}
          <button
            onClick={() => setOpen(true)}
            className="bg-green-500 hover:bg-green-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg focus:outline-none transition-all duration-300 hover:scale-110"
            aria-label="M·ªü chat"
            title="Chat v·ªõi ch√∫ng t√¥i"
          >
            <svg width="32" height="32" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.48 2 2 5.92 2 10.5c0 2.54 1.54 4.81 4 6.32V22l4.29-2.15c.56.08 1.13.13 1.71.13 5.52 0 10-3.92 10-8.5S17.52 2 12 2Z" /></svg>
          </button>
        </div>
      )}
      {/* Khung chat */}
      {open && (
        <div className="fixed bottom-6 right-6 z-50 w-96 max-w-[95vw] bg-white dark:bg-gray-800 rounded-2xl shadow-2xl flex flex-col border border-gray-200 dark:border-gray-700">
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-green-500 to-emerald-600 rounded-t-2xl">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 5.92 2 10.5c0 2.54 1.54 4.81 4 6.32V22l4.29-2.15c.56.08 1.13.13 1.71.13 5.52 0 10-3.92 10-8.5S17.52 2 12 2Z" />
                </svg>
              </div>
              <div>
                <span className="text-white font-semibold text-lg">{t('common.supportChat') || 'Support Chat'}</span>
                <div className="text-xs text-green-100">
                  {user?._id ? 'ƒê√£ ƒëƒÉng nh·∫≠p' : 'Chat ·∫©n danh'} ‚Ä¢ Ph·∫£n h·ªìi nhanh
                </div>
              </div>
            </div>
            <button 
              onClick={() => setOpen(false)} 
              className="text-white hover:text-gray-200 text-2xl font-bold transition-colors duration-200"
            >
              √ó
            </button>
          </div>
          
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3 h-80 bg-gray-50 dark:bg-gray-900">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-500 mx-auto mb-2"></div>
                  <div className="text-gray-500 text-sm">ƒêang t·∫£i tin nh·∫Øn...</div>
                </div>
              </div>
            ) : showInfoForm ? (
              // Form nh·∫≠p th√¥ng tin cho user ·∫©n danh
              <div className="flex items-center justify-center h-full">
                <div className="w-full max-w-sm">
                  <div className="text-center mb-6">
                    <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                      Th√¥ng tin li√™n h·ªá
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Vui l√≤ng nh·∫≠p th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n
                    </p>
                  </div>
                  
                  <form onSubmit={handleInfoSubmit} className="space-y-4">
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        H·ªç v√† t√™n *
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        required
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Email *
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        required
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                        placeholder="Nh·∫≠p email"
                      />
                    </div>
                    
                    <button
                      type="submit"
                      className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white py-2 px-4 rounded-lg font-medium transition-all duration-200"
                    >
                      B·∫Øt ƒë·∫ßu chat
                    </button>
                  </form>
                </div>
              </div>
            ) : (
              Array.isArray(messages) && messages.map((msg, idx) => {
                // X√°c ƒë·ªãnh tin nh·∫Øn c√≥ ph·∫£i c·ªßa user hi·ªán t·∫°i kh√¥ng
                const isCurrentUser = user?._id ? msg.from === user._id : msg.from.startsWith('anonymous_');
                
                return (
                  <div key={idx} className={`flex ${isCurrentUser ? "justify-end" : "justify-start"}`}>
                    <div className={`px-4 py-3 rounded-2xl max-w-[85%] shadow-sm ${
                      isCurrentUser
                        ? "bg-gradient-to-r from-green-500 to-emerald-600 text-white" 
                        : "bg-white dark:bg-gray-700 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-600"
                    }`}>
                      <div className="text-sm leading-relaxed">{msg.content}</div>
                      <div className={`text-xs mt-2 ${isCurrentUser ? "text-green-100" : "text-gray-500"}`}>
                        {msg.createdAt ? new Date(msg.createdAt).toLocaleString('vi-VN', {
                          hour: '2-digit',
                          minute: '2-digit'
                        }) : ""}
                      </div>
                    </div>
                  </div>
                );
              })
            )}
            <div ref={chatEndRef} />
          </div>
          
          {/* Input */}
          {!showInfoForm && (
            <form onSubmit={handleSend} className="border-t border-gray-200 dark:border-gray-700 p-4 bg-white dark:bg-gray-800 rounded-b-2xl">
              <div className="flex gap-2">
                <input
                  type="text"
                  className="flex-1 px-4 py-3 rounded-full border border-gray-300 dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder={t('common.inputMessage') || 'Nh·∫≠p tin nh·∫Øn...'}
                  value={input}
                  onChange={e => setInput(e.target.value)}
                />
                <button 
                  type="submit" 
                  className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-6 py-3 rounded-full font-medium transition-all duration-200 shadow-lg hover:shadow-xl"
                >
                  {t('common.send') || 'G·ª≠i'}
                </button>
              </div>
            </form>
          )}
        </div>
      )}
    </>
  );
} 